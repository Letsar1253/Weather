// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.DatabaseProvider.Models;

#nullable disable

namespace Server.DatabaseProvider.Migrations
{
    [DbContext(typeof(WeatherAppDbContext))]
    partial class WeatherAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.DatabaseProvider.Models.CurrentWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AirQualityIndex")
                        .HasColumnType("double precision");

                    b.Property<double?>("ApparentTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("CardinalWindDirection")
                        .HasColumnType("text");

                    b.Property<double?>("CloudCover")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<string>("PartDay")
                        .HasColumnType("text");

                    b.Property<double?>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double?>("RelativeHumidity")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snowfall")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<TimeOnly?>("TimeSunrise")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("TimeSunset")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("WeatherIconId")
                        .HasColumnType("uuid");

                    b.Property<double?>("WindDirection")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("WeatherIconId");

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.DailyWeather", b =>
                {
                    b.Property<Guid>("DailyWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AverageDewPoint")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("CardinalWindDirection")
                        .HasColumnType("text");

                    b.Property<double?>("CloudCover")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsForecast")
                        .HasColumnType("boolean");

                    b.Property<double?>("MaxApparenTemperaturet")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinApparenTemperaturet")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double?>("RelativeHumidity")
                        .HasColumnType("double precision");

                    b.Property<double?>("SnowDepth")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snowfall")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WeatherIconId")
                        .HasColumnType("uuid");

                    b.Property<double?>("WindDirection")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("DailyWeatherId");

                    b.HasIndex("WeatherIconId");

                    b.ToTable("DailyWeather");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.HourlyWeather", b =>
                {
                    b.Property<Guid>("HourlyWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("ApparenTemperaturet")
                        .HasColumnType("double precision");

                    b.Property<string>("CardinalWindDirection")
                        .HasColumnType("text");

                    b.Property<double?>("CloudCover")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsForecast")
                        .HasColumnType("boolean");

                    b.Property<string>("PartDay")
                        .HasColumnType("text");

                    b.Property<double?>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double?>("RelativeHumidity")
                        .HasColumnType("double precision");

                    b.Property<double?>("SnowDepth")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snowfall")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WeatherIconId")
                        .HasColumnType("uuid");

                    b.Property<double?>("WindDirection")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("HourlyWeatherId");

                    b.HasIndex("WeatherIconId");

                    b.ToTable("HourlyWeather");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.WeatherIcon", b =>
                {
                    b.Property<Guid>("WeatherIconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.HasKey("WeatherIconId");

                    b.ToTable("WeatherIcon");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.CurrentWeather", b =>
                {
                    b.HasOne("Server.DatabaseProvider.Models.WeatherIcon", "WeatherIcon")
                        .WithMany()
                        .HasForeignKey("WeatherIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherIcon");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.DailyWeather", b =>
                {
                    b.HasOne("Server.DatabaseProvider.Models.WeatherIcon", "WeatherIcon")
                        .WithMany()
                        .HasForeignKey("WeatherIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherIcon");
                });

            modelBuilder.Entity("Server.DatabaseProvider.Models.HourlyWeather", b =>
                {
                    b.HasOne("Server.DatabaseProvider.Models.WeatherIcon", "WeatherIcon")
                        .WithMany()
                        .HasForeignKey("WeatherIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherIcon");
                });
#pragma warning restore 612, 618
        }
    }
}
